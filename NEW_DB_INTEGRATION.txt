/*
 * Copyright (c) 2013 by The AMOS project, Group 3, 
 * http://osr.cs.fau.de/2013/04/17/the-2013-amos-projects-start-today/
 *
 * This file is part of the AMOS OSVAS application.
 *
 * 
 * contact person: 	Radi Nikolaev
 *
 * created on: 		2013-06-30
 *
 * modified on:		2013-06-30
 */

************************************************************************

       INTEGRATING NEW VULNERABILITY DATABASES IN THE APPLICATION
       
       
       
       
1. CURRENT SITUATION
2. 5-STEP INTEGRATION

------------------------------------------------------------------------
       
       
1. CURRENT SITUATION
	
	The machanics of the vulnerability retrieval is quite 
	straightforward. The user provides information about the components
	they currenty use, either in a CSV file with a standard layout 
	or as an input for a search query on the homepage. As of now, the 
	only relevant input that the user should provide is the name of the
	component.
	
	Regardless of whether the input comes from a CSV file or a manual 
	input, the application comes up with a string or an array of strings
	representing each component that is being browsed. Integrating new
	vulnerability databases does not interfere with this functionality.
	If one has an array of compoment names rather than one single name, 
	the vulnerability results for each component are simply appended to 
	the results for the previous component. Thus, only one output XML 
	page is being produced, regardless of the number of components 
	browsed.
	
	Once the component name or names are clear, they are fed to a
	constructor in the class "Vulnerabilites" and are after that 
	processed further by a series of methods in the same class and two 
	other classes - "Vulnerability" and "VulnerabilityElement". 
	
	One of the methods of interest when it comes to integrating new 
	databases is getVulnerabilitiesByQuery(String query), found in class 
	"Vulnerabilities". It creates a URL address on the corresponding 
	website and returns a document with the search results extracted 
	directly from the HTML page. 

	There are two methods and one constructor which have to be created 
	or modified to integrate the new database. The necessary actions 
	are:
	1. create a new Vulnerabilities.getVulnerabilitiesByQuery(String s)
	2. create a new Vulnerabilities.initVulnerabilities(Document doc)
	3. update the constructor Vulnerabilities(String query)
	The necessary steps and their descriptions can be found below.
	
	The vulnerabilities and their elements are then shown separately
	with the help of a few further classes and servlets. They remain 
	independent on database integration.
	
	
	
	
2. 5-STEP INTEGRATION
	
	
>1. create a URL pattern string for browsing in the new database. For
	instance: 
		<<"http://www.newdatabase.org/search/search?title=" + query>>

>2.	copy the method getVulnerabilitiesByQuery(String query) from class
	Vulnerabilities, rename it with a relevant name, and place the URL
	pattern you have just created as a parameter in the "connect" 
	method. For instance:
		
		protected Document getVulnerabilitiesByQueryInDB1(String query) 
													throws IOException {
        Document doc = Jsoup.connect(
            "http://www.newdatabase.org/search/search?title=" + query
        ).userAgent("Mozilla").timeout(3000).get();
        return doc;
		}

>3.	create a new document inside the constructor in class 
	"Vulnerabilities", right next to the the document that has already 
	been created there. For instance:
		Document doc = this.getVulnerabilitiesByQuery(query);  //default
		Document doc1 = this.getVulnerabilitiesByQueryInDB1(query);//new
	
>4. create a new method for intitialization of vulnerabilities, which
	behaves exactly like initVulnerabilities(Document doc). This step is 
	highly complicated and depends entirely on the html output page from
	the website of the newly integrated database. What is important, 
	however, is adding elements to any single vulnerability (
	v.addElements(String string, ...);) as well as adding each single 
	vulnerability to the array list (this.vulnerabilities.add(v);). The
	name of the new method should be similar to the name of the default
	intialization method, for example 
		initVulnerabilitiesFromDB1(Document doc){}

>5.	initiate the vulnerabilities in the newly created document in the 
	constructor in classe "Vulnerabilities", right next to the 
	initialization of the vulnerabilities of the default document. For 
	example:
		this.initVulnerabilities(doc);			//default
		this.initVulnerabilitiesFromDB1(doc1);	//new
		

		
************************************************************************	
	
		
	
